// You should not alter this first line ... It will be swallowed but not digested.

/*
 * some defaults we want to enforce
 * from: https://developer.mozilla.org/en-US/Firefox/Enterprise_deployment
 * and Resources/omni.ja:defaults/autoconfig/prefcalls.js
 */

// Disable updater
lockPref("app.update.enabled", false);
// make absolutely sure it is really off
lockPref("app.update.auto", false);
lockPref("app.update.mode", 0);
lockPref("app.update.service.enabled", false);

// Disable Add-ons compatibility checking
clearPref("extensions.lastAppVersion");

// Don't show 'know your rights' on first run
pref("browser.rights.3.shown", true);
pref("browser.rights.override", true);

// Don't show WhatsNew on first run after every update
pref("browser.startup.homepage_override.mstone","ignore");

// Set default homepage - users can change/override -- NOT set for now
// defaultPref("browser.startup.homepage", "data:text/plain,browser.startup.homepage=http://www.ethz.ch/");

// Disable health reporter
lockPref("datareporting.healthreport.service.enabled", false);

// Dont nag about who's the default browser
pref("browser.shell.checkDefaultBrowser", false);

//
// Starting with v40.0, trash privacy-breaking settings
// http://news.slashdot.org/story/15/08/14/2321202/how-to-quash-firefoxs-silent-requests
pref('network.http.speculative-parallel-limit', 0);
// disable "pocket"
// https://support.mozilla.org/en-US/questions/1065182#answer-740266
pref("browser.pocket.api", "");
pref("browser.pocket.oAuthConsumerKey", "");
pref("browser.pocket.site", "");
// more privacy settings for 43.0
pref("datareporting.healthreport.uploadEnabled", false);
pref("datareporting.healthreport.service.enabled", false);
pref("datareporting.healthreport.pendingDeleteRemoteData", true);
pref("datareporting.policy.dataSubmissionEnabled", false);
pref("datareporting.policy.dataSubmissionPolicyAcceptedVersion", 1);


/*
 * enable pre-installed addons
 * relevant parts teared out of CKK2.xpi:/modules/CCK2.jsm @line~777
 */

const Cu = Components.utils;
Cu.import("resource://gre/modules/Services.jsm");
Cu.import("resource://gre/modules/AddonManager.jsm");

var numAddonsInstalled = 1;
var FileUtils = Cu.import("resource://gre/modules/FileUtils.jsm").FileUtils;
var languages = ['de','it','fr','rm'];

var ethz = {
  observe: function observe(subject, topic, data) {
    switch (topic) {
      case "final-ui-startup":
        // if the pref named below exists, we shouldn't run again and just return
        if (getPref("extensions.ethz.firstrunDone.#FIREFOX_VERSION#")) {
          return;
        }
        var langDone = 0;
        var listener = {
          onInstallEnded: function(install, addon) {
            langDone++;
            if (langDone==5) {
              // only exit after all five addons have reported "install ended"
              Services.startup.quit(Services.startup.eRestart | Services.startup.eAttemptQuit);
            }
          }
        }
        // install language packs. the will be copied to the user's profile folder!
        for (lang in languages) {
          var xpifile = '/Applications/Firefox.app/Contents/Resources/langpacks/langpack-' + languages[lang] + '@firefox.mozilla.org.xpi';
          var nsifile   = new FileUtils.File(xpifile);
          try {
            AddonManager.getInstallForFile(nsifile, function(addonInstall) {
              addonInstall.addListener(listener);
              addonInstall.install();
              }, "application/x-xpinstall");
          } catch (e) {
            errorCritical(e);
          }
        }

        // before installing langswitcher, "remeber" that we succeeded so far
        // # FIREFOX_VERSION # will be replaced during package build by our version
        pref("extensions.ethz.firstrunDone.#FIREFOX_VERSION#", true);

        // install lang switcher, should auto-restart after installation.
//        var xpifile = '/Applications/Firefox.app/Contents/Resources/langpacks/locale_switcher-3-fx.xpi';
//      var nsifile   = new FileUtils.File(xpifile);
//      try {
//        AddonManager.getInstallForFile(nsifile, function(addonInstall) {
//          addonInstall.addListener(listener);
//          addonInstall.install();
//        }, "application/x-xpinstall");
//      } catch (e) {
//        errorCritical(e);
//        }

      break;
    }
  },
  init: function() {
  }
}

// this will call our ethz.observe function above as soon as ui startup has completed.
Services.obs.addObserver(ethz, "final-ui-startup", false);
